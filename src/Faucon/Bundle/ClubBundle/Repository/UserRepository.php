<?php

namespace Faucon\Bundle\ClubBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getRankingByCategory(\Faucon\Bundle\ClubBundle\Entity\User $user, \Faucon\Bundle\RankingBundle\Entity\Category $category)
    {
        try
        {
            $ranking = $this->getEntityManager()
                ->createQuery('select r from FauconRankingBundle:Ranking r where r.player = :user and r.category = :category')
                ->setParameter('user', $user)
                ->setParameter('category', $category)
                ->getSingleResult();
            return $ranking->getRanking();
        }
        catch (\Doctrine\ORM\NoResultException $ex)
        {
            return null;
        }
    }

    public function getRankingInstanceByCategory(\Faucon\Bundle\ClubBundle\Entity\User $user, \Faucon\Bundle\RankingBundle\Entity\Category $category)
    {
        try
        {
            return $this->getEntityManager()
                ->createQuery('select r from FauconRankingBundle:Ranking r where r.player = :user and r.category = :category')
                ->setParameter('user', $user)
                ->setParameter('category', $category)
                ->getSingleResult();
        }
        catch (\Doctrine\ORM\NoResultException $ex)
        {
            return null;
        }
    }
    
    public function canChallenge(\Faucon\Bundle\ClubBundle\Entity\User $user = null, \Faucon\Bundle\RankingBundle\Entity\Category $category, \Faucon\Bundle\RankingBundle\Entity\Ranking $ranking)
    {
        if ($user == null)
        {
            return false;
        }
        $rankingrepository = $this->getEntityManager()
                ->getRepository('FauconRankingBundle:Ranking');
        $userranking = $this->getRankingByCategory($user, $category);
        $layer = $rankingrepository->getLayerForRanking(1, $userranking);
        if ($layer == 1)
        {
            return false;
        }
        if ($userranking <= $ranking->getRanking())
        {
            return false;
        }
        $rankinglayer = $rankingrepository->getLayerForRanking(1, $ranking->getRanking());
        if ($layer == $rankinglayer || $layer-1 == $rankinglayer)
        {
            return true;
        }
        return false;
    }
    
    public function getByClubRelations($clubrelations)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb->select('cr')
                ->from('FauconClubBundle:ClubRelation', 'cr')
                ->join('cr.user', 'u')
                ->join('cr.club', 'c')
                ->add('where', $qb->expr()->in('cr', '?1'))
                ->setParameter(1, $clubrelations)
                ->groupBy('c.id')
                ->orderBy('c.name', 'asc')
                ->orderBy('u.lastname', 'asc')
                ->orderBy('u.firstname', 'asc')
                ->getQuery()
                ->getResult();
    }
    
    public function getByClubs($clubs)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb->select('cr')
                ->from('FauconClubBundle:ClubRelation', 'cr')
                ->join('cr.user', 'u')
                ->join('cr.club', 'c')
                ->add('where', $qb->expr()->in('c', '?1'))
                ->setParameter(1, $clubs)
                ->orderBy('c.name', 'asc')
                ->orderBy('u.lastname', 'asc')
                ->orderBy('u.firstname', 'asc')
                ->getQuery()
                ->getResult();
    }
    
    public function deleteUser(\Faucon\Bundle\ClubBundle\Entity\User $user)
    {
        $em = $this->getEntityManager();
        $em->remove($user);
        $em->flush();
    }
    
    public function isUsernameAvailable($username)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb->select('count(u)')
                ->from('FauconClubBundle:User', 'u')
                ->where('u.username = ?1')
                ->setParameter(1, $username)
                ->getQuery()
                ->getSingleScalarResult() == 0;
    }
    
    public function isEmailAddressAvailable($email)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb->select('count(u)')
                ->from('FauconClubBundle:User', 'u')
                ->where('u.email = ?1')
                ->setParameter(1, $email)
                ->getQuery()
                ->getSingleScalarResult() == 0;
    }
}