<?php

namespace Faucon\Bundle\RankingBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Faucon\Bundle\RankingBundle\Services\DateUtility;
use Faucon\Bundle\RankingBundle\Entity\Challenge;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Faucon\DataProviders\DataTables;
use Faucon\DataProviders\IDataTablesRepository;

/**
 * ChallengeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChallengeRepository extends EntityRepository implements IDataTablesRepository
{
    public function getChallengesByUser(\Faucon\Bundle\ClubBundle\Entity\User $user)
    {
        return $this->getEntityManager()
                ->createQueryBuilder()
                ->select('c')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where('(c.challenger = ?1 or c.challenged = ?1)')
                ->andWhere('g is null')
                ->andWhere('c.created > ?2')
                ->setParameter(1, $user)
                ->setParameter(2, new \DateTime(date("Y-m-d", strtotime("-14 days"))))
                ->orderBy('c.category')
                ->orderBy('c.created')
                ->getQuery()
                ->getResult();
    }
    
    public function getChallengesByUserAndCategory(\Faucon\Bundle\ClubBundle\Entity\User $user, \Faucon\Bundle\RankingBundle\Entity\Category $category)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb
                ->select('c')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where($qb->expr()->orX(
                    $qb->expr()->eq('c.challenger', '?1'),
                    $qb->expr()->eq('c.challenged', '?1')
                ))
                ->andWhere('c.category = ?2')
                //->andWhere('g is null')
                ->setParameter(1, $user)
                ->setParameter(2, $category)
                ->orderBy('c.created')
                ->getQuery()
                ->getResult();
    }
    
    public function getOpenChallengeByCategory(\Faucon\Bundle\ClubBundle\Entity\User $user, \Faucon\Bundle\RankingBundle\Entity\Category $category)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb
                ->select('c')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where($qb->expr()->orX(
                    $qb->expr()->eq('c.challenger', '?1'),
                    $qb->expr()->eq('c.challenged', '?1')
                ))
                ->andWhere('c.category = ?2')
                ->andWhere('g is null')
                ->andWhere('c.created > ?3')
                ->setParameter(1, $user)
                ->setParameter(2, $category)
                ->setParameter(3, new \DateTime(date("Y-m-d", strtotime("-14 days"))))
                ->getQuery()
                ->getSingleResult();
    }
    
    public function hasOpenChallengeInCategory(\Faucon\Bundle\ClubBundle\Entity\User $user, \Faucon\Bundle\RankingBundle\Entity\Category $category)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb
                ->select('count(c)')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where($qb->expr()->orX(
                    $qb->expr()->eq('c.challenger', '?1'),
                    $qb->expr()->eq('c.challenged', '?1')
                ))
                ->andWhere('c.category = ?2')
                ->andWhere('g is null')
                ->andWhere('c.created > ?3')
                ->setParameter(1, $user)
                ->setParameter(2, $category)
                ->setParameter(3, new \DateTime(date("Y-m-d", strtotime("-14 days"))))
                ->getQuery()
                ->getSingleScalarResult() > 0;
    }
    
    public function findLastFive()
    {
        return $this->getEntityManager()
                ->createQueryBuilder()
                ->select('c')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where('g is not null')
                ->orWhere('(c.created > ?1 and g is null)')
                ->setParameter(1, new \DateTime(date("Y-m-d", strtotime("-14 days"))))
                ->orderBy('c.created', 'desc')
                ->setMaxResults(5)
                ->getQuery()
                ->getResult();
    }
    
    public function findLastFiveInCategory($categoryid)
    {
        $em = $this->getEntityManager();
        $category = $em->getRepository('FauconRankingBundle:Category')->find($categoryid);
        return $em
                ->createQuery('select c from FauconRankingBundle:Challenge c 
                    left join c.game g
                    where c.category = ?1
                    and (g is not null
                    or (c.created > ?2 and g is null))
                    order by c.created desc')
                ->setParameter(1, $category)
                ->setParameter(2, new \DateTime(date("Y-m-d", strtotime("-14 days"))))
                ->setMaxResults(5)
                ->getResult();
    }

    public function getDataTablesResult(ContainerInterface $container, $pageoffset, $pagesize, $options)
    {
        $dateutility = new DateUtility();
        $onlyopen = false;
        if (count($options) > 0)
        {
            if ($options['filter'] == 'onlyopen')
            {
                $onlyopen = true;
            }
        }
        $addclubconstraint = false;
        $adddateconstraint = false;
        $dql = 'select c from FauconRankingBundle:Challenge c
            left join c.game g';
        $clubs = $this->getUsersClubs($container);
        if ($onlyopen)
        {
            if ($clubs != null) {
                $addclubconstraint = true;
                $dql .= ' left join c.category ca left join ca.club cl
                    where cl.id in (?1) and g is null';
            }
            else {
                $dql .= ' where g is null';
            }
        }
        else
        {
            $adddateconstraint = true;
            if ($clubs != null) {
                $addclubconstraint = true;
                $dql .= ' left join c.category ca left join ca.club cl
                    where cl.id in (?1) and (g is not null or (c.created > ?2 and g is null))';
            }
            else {
                $dql .= ' where g is not null or (c.created > ?1 and g is null)';
            }
        }
        $dql .= ' order by c.created desc';
        
        $query = $this->getEntityManager()->createQuery($dql);
        
        if ($addclubconstraint && $adddateconstraint) {
            $query = $query->setParameter(1, $clubs)
                    ->setParameter(2, new \DateTime(date("Y-m-d", strtotime("-14 days"))));
            
        }
        else if ($addclubconstraint) {
            $query = $query->setParameter(1, $clubs);            
        }
        else if ($adddateconstraint) {
            $query = $query->setParameter(1, new \DateTime(date("Y-m-d", strtotime("-14 days"))));
        }
        
        $sql = $query->setFirstResult($pageoffset)
                ->setMaxResults($pagesize)
                ->getSQL();
        $result = $query->setFirstResult($pageoffset)
                ->setMaxResults($pagesize)
                ->getResult();
        $data = array();
        foreach ($result as $challenge)
        {
            $row = array();
            $row[] = $challenge->getChallenger()->__toString();
            $row[] = $challenge->getChallenged()->__toString();
            $row[] = $challenge->getCategory()->getClub()->getName();
            $row[] = $challenge->getCategory()->getName();
            $row[] = $dateutility->ago($challenge->getCreated()->format('Y-m-d H:i:s'));
            $row[] = $this->renderChallengeStatus($container, $challenge);
            $data[] = $row;
        }
        return $data;
    }

    private function getUsersClubs(ContainerInterface $container)
    {
        if ($container->get('security.context')->isGranted('ROLE_USER')) {
            $user = $container->get('security.context')->getToken()->getUser();
            $clubrelations = $user->getClubRelations();
            $clubs = array();
            foreach($clubrelations as $relation) {
                $clubs[] = $relation->getClub()->getId();
            }
            return $clubs;
        }
        return null;
    }

    private function renderChallengeStatus(ContainerInterface $container, Challenge $challenge)
    {
        $engine = $container->get('templating');
        if ($challenge->getGame() != null)
        {
            return $engine->render('FauconRankingBundle:Challenge:linktoresult.html.twig', array('entity' => $challenge));
        }
        else
        {
            return $engine->render('FauconRankingBundle:Challenge:addresult.html.twig', array('entity' => $challenge));
        }
    }

    public function getDataTablesRowsCount(ContainerInterface $container)
    {
        $clubs = $this->getUsersClubs($container);
        $dql = 'select count(c) from FauconRankingBundle:Challenge c
            left join c.game g';
        if ($clubs != null) {
            $dql .= ' left join c.category ca
                left join ca.club cl
                where (g is not null or (c.created > ?1 and g is null))
                and cl.id in (?2)';
        }
        else {
            $dql .= ' where g is not null
                or (c.created > ?1 and g is null)';
        }
        $q = $this->getEntityManager()->createQuery($dql)
                ->setParameter(1, new \DateTime(date("Y-m-d", strtotime("-14 days"))));
        if ($clubs != null) {
            $q = $q->setParameter(2, $clubs);
        }
        return $q->getSingleScalarResult();        
    }
    
    public function findAllOpen()
    {
        return $this->getEntityManager()
                ->createQueryBuilder()
                ->select('c')
                ->from('FauconRankingBundle:Challenge', 'c')
                ->leftJoin('c.game', 'g')
                ->where('g is null')
                ->orderBy('c.category')
                ->orderBy('c.created')
                ->getQuery()
                ->getResult();        
    }
}